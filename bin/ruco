#!/usr/bin/env ruby

require "ruco"
require "cocor"
require "fileutils"

if ARGV.length < 1
	puts "Usage: ruco <grammar.ruco> [Grammar Name]"
	exit 1
end

file = ARGV[0]
grammar_name = File.basename file, ".ruco"
grammar_name = ARGV[1] if ARGV[1]

rr = Ruco::Ruco.new grammar_name.capitalize do
	instance_eval(File.read(file), file)
end

File.write("#{grammar_name}.atg",rr.generate_atg)
File.write("#{grammar_name.capitalize}.hpp",rr.generate_header)
File.write("parse_#{grammar_name}.cpp",rr.generate_libcpp)
File.write("parse_#{grammar_name}.hpp",rr.generate_libhpp)
File.write("Makefile", rr.generate_makefile) unless File.exists? "Makefile"
File.write("#{grammar_name}.cpp", <<-EXAMPLE_FILE ) unless File.exists? "#{grammar_name}.cpp"
#include "parse_#{grammar_name}.hpp"

// This is an example of how you would parse a file and print its AST.

int main()
{
	try
	{
		auto a = #{grammar_name.capitalize}::Parse("test.#{grammar_name}");
		std::wcout << #{grammar_name.capitalize}::Jsonify(a).serialize() << std::endl;
		return EXIT_SUCCESS;
	}
	catch(#{grammar_name.capitalize}::FileNotFoundException e)
	{
		std::wcout << "File test.#{grammar_name} not found." << std::endl;
	}
	catch(#{grammar_name.capitalize}::ParserException e)
	{
		std::wcout << e.GetMessage() << std::endl;
	}
	return EXIT_SUCCESS;
}
EXAMPLE_FILE

FileUtils.cp(File.join(Gem.loaded_specs['ruco-cpp'].full_gem_path, "data", "ruco-cpp", "picojson", "picojson.h"),"picojson.hpp")

atg = File.join(Dir.pwd, "#{grammar_name}.atg")
datadir = File.join(Gem.loaded_specs['ruco-cpp'].full_gem_path, "data", "ruco-cpp")
puts atg

Cocor.compile atg, datadir, grammar_name.capitalize, "#{Dir.pwd}/"
